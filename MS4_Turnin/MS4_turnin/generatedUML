digraph UML_Diagram
{
rankdir=BT;

ClassRep [
shape = "record", color="black",
label = "{ClassRep\l|
- publicStaticGetInstatnce : boolean\l
- privateSingletonInit : boolean\l
- privateSingletonField : boolean\l
|+ init : void\l
+ setPrivateSingletonInit : void\l
+ setPrivateSingletonField : void\l
+ isSingleton : boolean\l
+ setPublicStaticGetInstatnce : void\l
+ accept : void\l
}"];

UMLMethodVisitor [
shape = "record", color="black",
label = "{UMLMethodVisitor\l|
- callingClassName : String\l
- fullCallingClassName : String\l
|- getCalledClass : String\l
+ init : void\l
+ visitMethodInsn : void\l
}"];

UsesRelation [
shape = "record", color="black",
label = "{UsesRelation\l|
- from : String\l
- to : String\l
|+ init : void\l
+ hashCode : int\l
+ equals : boolean\l
+ getTo : String\l
+ getFrom : String\l
+ accept : void\l
}"];

DesignParser [
shape = "record", color="black",
label = "{DesignParser\l|
|+ init : void\l
- getGenerationType : String\l
- isMethodSignature : boolean\l
+ main : void\l
}"];

SequenceOutputStream [
shape = "record", color="black",
label = "{SequenceOutputStream\l|
- visitedClasses : Set\l
- methods : StringBuilder\l
- classes : StringBuilder\l
- visitor : IVisitor\l
|+ init : void\l
- appendArgs : void\l
+ write : void\l
- lambda$setupClassVisit$0 : void\l
+ setupClassVisit : void\l
- addClass : void\l
- addMethod : void\l
}"];

AssociationRelation [
shape = "record", color="black",
label = "{AssociationRelation\l|
# from : String\l
# to : String\l
|+ init : void\l
+ hashCode : int\l
+ equals : boolean\l
+ getTo : String\l
+ getFrom : String\l
+ accept : void\l
}"];

MethodRep [
shape = "record", color="black",
label = "{MethodRep\l|
- className : String\l
- usesRelations : List\l
|+ init : void\l
+ getUsesRelations : List\l
+ getSimpleClassName : String\l
+ addUsesRelation : void\l
+ getClassName : String\l
+ accept : void\l
}"];

UMLOutputStream [
shape = "record", color="black",
label = "{UMLOutputStream\l|
- visitor : IVisitor\l
|+ init : void\l
- lambda$setupVisitAbstractClass$0 : void\l
+ setupPostVisit : void\l
- lambda$setupVisitInterface$2 : void\l
+ setupPrevisit : void\l
+ setupVisitAbstractClass : void\l
- lambda$setupVisitMethod$3 : void\l
+ setupVisitInterface : void\l
- lambda$setupPostVisit$6 : void\l
+ setupVisitField : void\l
+ setupVisitMethod : void\l
+ setupRelationVisit : void\l
- lambda$setupRelationVisit$7 : void\l
- lambda$setupVisitField$4 : void\l
- lambda$setupRelationVisit$8 : void\l
- lambda$setupVisitClass$1 : void\l
- lambda$setupPrevisit$5 : void\l
+ setupVisitClass : void\l
+ write : void\l
}"];

LookupKey [
shape = "record", color="black",
label = "{LookupKey\l|
# clazz : Class\l
# visitType : VisitType\l
|+ init : void\l
+ hashCode : int\l
+ equals : boolean\l
}"];

InterfaceRep [
shape = "record", color="black",
label = "{InterfaceRep\l|
|+ init : void\l
+ accept : void\l
}"];

AbstractClassRep [
shape = "record", color="black",
label = "{AbstractClassRep\l|
|+ init : void\l
+ accept : void\l
}"];

SingletonVisitor [
shape = "record", color="black",
label = "{SingletonVisitor\l|
- visitor : IVisitor\l
|+ init : void\l
- setupFieldVisit : void\l
- lambda$setupMethodVisit$0 : void\l
- lambda$setupFieldVisit$2 : void\l
- setupMethodPostVisit : void\l
+ visitAll : void\l
- lambda$setupMethodPostVisit$1 : void\l
- setupMethodVisit : void\l
}"];

ParsedDataStorage [
shape = "record", color="blue",
label = "{ParsedDataStorage\l\<\<Singleton\>\>\l|
# associationRels : List\l
# interfaces : Map\l
- max_depth : int\l
# classes : Map\l
# methodCalls : List\l
- storage : ParsedDataStorage\l
# usesRels : List\l
# abstractClasses : Map\l
|- init : void\l
+ getClass : AbstractJavaClassRep\l
+ getInterface : AbstractJavaClassRep\l
+ getInterfacade : AbstractJavaClassRep\l
+ getAbstractClasses : Collection\l
+ addAbstractClass : void\l
+ getInterfaces : Collection\l
+ addField : void\l
+ getMax_depth : int\l
+ setMax_depth : void\l
+ accept : void\l
- destroySelf : void\l
+ addInterfaces : void\l
+ addMethodCall : boolean\l
+ addAssociationRelation : boolean\l
+ getAbstractClass : AbstractJavaClassRep\l
+ getAssociationRels : List\l
+ getUsesRels : List\l
+ getInstance : ParsedDataStorage\l
+ addUsesRelation : boolean\l
+ getMethods : MethodCall[]\l
+ getClasses : Collection\l
+ addClass : void\l
+ addMethod : void\l
}"];

FieldRep [
shape = "record", color="black",
label = "{FieldRep\l|
- className : String\l
|+ init : void\l
+ getSimpleClassName : String\l
+ getClassName : String\l
+ accept : void\l
}"];

UMLClassMethodVisitor [
shape = "record", color="black",
label = "{UMLClassMethodVisitor\l|
# depth : int\l
# className : String\l
# desiredMethodName : String\l
|+ init : void\l
# addArguments : String[]\l
- getInnermostClass : String\l
+ visitMethod : MethodVisitor\l
# addReturnType : String\l
}"];

SequenceVisitor [
shape = "record", color="black",
label = "{SequenceVisitor\l|
|+ init : void\l
- appendArgs : void\l
+ visit : void\l
- addClass : void\l
- addMethod : void\l
}"];

ClassDeclarationVisitor [
shape = "record", color="black",
label = "{ClassDeclarationVisitor\l|
# className : String\l
|+ init : void\l
+ visit : void\l
}"];

SequenceMethodVisitor [
shape = "record", color="black",
label = "{SequenceMethodVisitor\l|
- callingClassName : String\l
- depth : int\l
- fullCallingClassName : String\l
|- getCalledClass : String\l
+ init : void\l
- getRetType : String\l
+ visitMethodInsn : void\l
- downTheRabbitHole : void\l
- getArgs : String[]\l
}"];

SequenceClassMethodVisitor [
shape = "record", color="black",
label = "{SequenceClassMethodVisitor\l|
# depth : int\l
# className : String\l
# desiredMethodName : String\l
|+ init : void\l
# addArguments : String[]\l
- getInnermostClass : String\l
+ visitMethod : MethodVisitor\l
# addReturnType : String\l
}"];

GraphGenerator [
shape = "record", color="black",
label = "{GraphGenerator\l|
|+ buildUMLClassDiagram : String\l
+ init : void\l
+ getOutputType : String\l
+ Generate : String\l
+ parse : void\l
}"];

ClassFieldVisitor [
shape = "record", color="black",
label = "{ClassFieldVisitor\l|
# className : String\l
|+ init : void\l
+ visitField : FieldVisitor\l
- getInnermostClass : String\l
}"];

SequenceGenerator [
shape = "record", color="black",
label = "{SequenceGenerator\l|
|+ init : void\l
+ getOutputType : String\l
+ Generate : String\l
+ parse : void\l
}"];

VisitType [
shape = "record", color="black",
label = "{VisitType\l|
+ PreVisit : VisitType\l
+ Visit : VisitType\l
+ PostVisit : VisitType\l
- $VALUES : VisitType[]\l
|- init : void\l
+ valueOf : VisitType\l
+ values : VisitType[]\l
# clinit : void\l
}"];

MethodCall [
shape = "record", color="black",
label = "{MethodCall\l|
- args : String[]\l
- retType : String\l
- fullClassName : String\l
- calledClass : String\l
- callingClass : String\l
- methodName : String\l
|+ acceptSequenceClass : void\l
+ init : void\l
+ getRetType : String\l
+ GetCallingClass : String\l
+ GetArgs : String[]\l
+ GetMethodName : String\l
+ equals : boolean\l
+ getFullClassName : String\l
+ GetCalledClass : String\l
+ setFullClassName : void\l
+ accept : void\l
}"];

GeneratorFactory [
shape = "record", color="black",
label = "{GeneratorFactory\l|
|+ init : void\l
+ getGenerator : IGenerator\l
}"];

Visitor [
shape = "record", color="black",
label = "{Visitor\l|
# keyToVisitMethodMap : Map\l
|+ init : void\l
+ postVisit : void\l
- doVisit : void\l
+ preVisit : void\l
+ addVisit : void\l
+ removeVisit : void\l
+ visit : void\l
}"];

IGenerator [
shape = "record",
label = "{\<\<interface\>\>\lIGenerator\l||ParseClasses.MethodRep@4f3f5b24ParseClasses.MethodRep@15aeb7abParseClasses.MethodRep@7b23ec81}"];

ITraverser [
shape = "record",
label = "{\<\<interface\>\>\lITraverser\l||ParseClasses.MethodRep@6acbcfc0}"];

IDataStorage [
shape = "record",
label = "{\<\<interface\>\>\lIDataStorage\l||ParseClasses.MethodRep@5f184fc6ParseClasses.MethodRep@3feba861ParseClasses.MethodRep@5b480cf9ParseClasses.MethodRep@6f496d9fParseClasses.MethodRep@723279cfParseClasses.MethodRep@10f87f48ParseClasses.MethodRep@b4c966aParseClasses.MethodRep@2f4d3709ParseClasses.MethodRep@4e50df2eParseClasses.MethodRep@1d81eb93ParseClasses.MethodRep@7291c18f}"];

IVisitMethod [
shape = "record",
label = "{\<\<interface\>\>\lIVisitMethod\l||ParseClasses.MethodRep@34a245ab}"];

IRelation [
shape = "record",
label = "{\<\<interface\>\>\lIRelation\l||ParseClasses.MethodRep@7cc355beParseClasses.MethodRep@6e8cf4c6}"];

ISequenceVisitor [
shape = "record",
label = "{\<\<interface\>\>\lISequenceVisitor\l|+ classesVisited : Set\l
|ParseClasses.MethodRep@12edcd21ParseClasses.MethodRep@34c45dca}"];

IVisitor [
shape = "record",
label = "{\<\<interface\>\>\lIVisitor\l||ParseClasses.MethodRep@52cc8049ParseClasses.MethodRep@5b6f7412ParseClasses.MethodRep@27973e9bParseClasses.MethodRep@312b1daeParseClasses.MethodRep@7530d0a}"];

AbstractTypable [
shape = "record",
label = "{<I>AbstractTypable</I>\l|- type : String\l
|+ init : void\l
+ getType : String\l
}"];

AbstractData [
shape = "record",
label = "{<I>AbstractData</I>\l|- accessibilityTranslator : Map\l
- accessibility : int\l
- name : String\l
|+ init : void\l
+ getName : String\l
+ getAccessibility : int\l
+ getTranslatedAccessibility : String\l
}"];

AbstractJavaClassRep [
shape = "record",
label = "{<I>AbstractJavaClassRep</I>\l|- implementsNames : List\l
# fieldsMap : Map\l
- profileTags : List\l
# methodsMap : Map\l
|+ init : void\l
+ getProfileTags : List\l
+ addImplements : void\l
+ getMethodsMap : Map\l
+ addField : void\l
+ getField : AbstractData\l
+ getFieldsMap : Map\l
+ addProfileTag : void\l
+ getMethod : AbstractData\l
+ getImplementsList : List\l
+ addMethod : void\l
}"];

AbstractExtendableClassRep [
shape = "record",
label = "{<I>AbstractExtendableClassRep</I>\l|- extendedClassName : String\l
|+ init : void\l
}"];
ParsedDataStorage -> ParsedDataStorage [arrowhead="vee", style="solid"];
ParsedDataStorage -> Map [arrowhead="vee", style="solid"];
ParsedDataStorage -> List [arrowhead="vee", style="solid"];
ParsedDataStorage -> int [arrowhead="vee", style="solid"];
ISequenceVisitor -> Set [arrowhead="vee", style="solid"];
AbstractData -> String [arrowhead="vee", style="solid"];
AbstractData -> int [arrowhead="vee", style="solid"];
AbstractData -> Map [arrowhead="vee", style="solid"];
AbstractExtendableClassRep -> String [arrowhead="vee", style="solid"];
AbstractJavaClassRep -> Map [arrowhead="vee", style="solid"];
AbstractJavaClassRep -> List [arrowhead="vee", style="solid"];
AbstractTypable -> String [arrowhead="vee", style="solid"];
AssociationRelation -> String [arrowhead="vee", style="solid"];
ClassRep -> boolean [arrowhead="vee", style="solid"];
FieldRep -> String [arrowhead="vee", style="solid"];
MethodCall -> String [arrowhead="vee", style="solid"];
MethodCall -> String[] [arrowhead="vee", style="solid"];
MethodRep -> List [arrowhead="vee", style="solid"];
MethodRep -> String [arrowhead="vee", style="solid"];
UsesRelation -> String [arrowhead="vee", style="solid"];
ClassDeclarationVisitor -> String [arrowhead="vee", style="solid"];
ClassFieldVisitor -> String [arrowhead="vee", style="solid"];
LookupKey -> VisitType [arrowhead="vee", style="solid"];
LookupKey -> Class [arrowhead="vee", style="solid"];
SequenceOutputStream -> IVisitor [arrowhead="vee", style="solid"];
SequenceOutputStream -> StringBuilder [arrowhead="vee", style="solid"];
SequenceOutputStream -> Set [arrowhead="vee", style="solid"];
UMLOutputStream -> IVisitor [arrowhead="vee", style="solid"];
SingletonVisitor -> IVisitor [arrowhead="vee", style="solid"];
SequenceClassMethodVisitor -> String [arrowhead="vee", style="solid"];
SequenceClassMethodVisitor -> int [arrowhead="vee", style="solid"];
SequenceMethodVisitor -> int [arrowhead="vee", style="solid"];
SequenceMethodVisitor -> String [arrowhead="vee", style="solid"];
UMLClassMethodVisitor -> String [arrowhead="vee", style="solid"];
UMLClassMethodVisitor -> int [arrowhead="vee", style="solid"];
UMLMethodVisitor -> String [arrowhead="vee", style="solid"];
Visitor -> Map [arrowhead="vee", style="solid"];
VisitType -> VisitType [arrowhead="vee", style="solid"];
VisitType -> VisitType[] [arrowhead="vee", style="solid"];

}